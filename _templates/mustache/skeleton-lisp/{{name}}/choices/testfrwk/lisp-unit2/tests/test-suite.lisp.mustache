":"; exec sbcl --script $0 $@
":"; exit
;#!/usr/bin/env sbcl --script

; Common Lisp - comments style conventions
; title       ;;;; Short title for block of code
; intro       ;;;  Description before block of code
; state       ;;   State of program or following code
; explanation ;    Regarding line on which it appears

; single-line comment
#| multi-line comment
    --- package manager - init/configure package ---
    (asdf:load-systems :cl-project)
    (cl-project:make-project "./" :name "pkg" :author "imcomputer"
      :license "..." :depends-on '(...)' :email "..." :description "...")
    
    --- generate docs ---
    (asdf:load-systems {:codex | :documentation-template} :pkg)
    ;(codex:document :pkg)
    (documentation-template:create-template :pkg :subtitle "Title"
        :target "docpath/dir/file.html")
    
    --- [native|byte]code - compile ; then run tests ---
    ;[sbcl | clisp] [--load | -i] test-suite.lisp [--eval | -x] '(pkg/test:save-image)'
    ;buildapp --load test-suite.lisp --entry pkg/test:main --output ts_main
    [sbcl | clisp] [--load | -i] test-suite.lisp [--eval | -x] '(asdf:make :pkg/test-image)'
    ./ts_main topt1 toptN
    
    --- start REPL w/ loaded script ; then run tests ---
    ; [sbcl | clisp] [--load | -i] test-suite.lisp
    ;   [--eval | -x] '(pkg/test:run-suites)' -- topt1 toptN
    ;[sbcl | clisp] [--load | -i] test-suite.lisp
    ;  [--eval | -x] '(asdf:test-system :pkg/test)' -- topt1 toptN
    [sbcl | clisp] [--load | -i] test-suite.lisp [--eval | -x] '(pkg/test:main (list topt1 toptN))'
    * > (main '("topt1" "toptN"))
    
    --- help/info tools in REPL ---
    (apropos 'PATTERN [:PKG]) (describe 'SYMBOL) *features*
    (documentation 'NAME 'DOC-TYPE)
    ; --- DOC-TYPE(s): 'T|'TYPE|'FUNCTION|'VARIABLE|'STRUCTURE|'SETF
|#

;(load "~/quicklisp/setup.lisp")
;(ql:register-local-projects)

#|
;(require :asdf)
(eval-when (:compile-toplevel :load-toplevel :execute)
	(require "asdf"))
|#

(asdf:load-systems :cl-quickcheck :{{testfrwk}}{{^testfrwk}}fiveam{{/testfrwk}} :{{name}}{{^name}}introlisp.util{{/name}})

;; NOTE: To run this test file, execute `(asdf:test-system :{{name}}{{^name}}introlisp.util{{/name}})' in your Lisp.

(defpackage :{{name}}{{^name}}introlisp.util{{/name}}/test
  (:documentation "Test system for {{name}}{{^name}}introlisp.util{{/name}}")
  (:use :cl :{{testfrwk}}{{^testfrwk}}fiveam{{/testfrwk}} :{{name}}{{^name}}introlisp.util{{/name}})
  (:export :main :run-suites :save-image)
  )
(in-package :{{name}}{{^name}}introlisp.util{{/name}}/test)

(rename-package 'cl-quickcheck 'cl-quickcheck '(qc))
;(setf qc:*num-trials* 100)

;(rename-package '{{name}}{{^name}}introlisp.util{{/name}}.classic '{{name}}{{^name}}introlisp.util{{/name}}.classic '(classic)) 

(defun in-epsilon (a b &optional (tolerance 0.001))
	(let ((delta (abs tolerance)))
		;(and (<= (- a delta) b) (>= (+ (a delta) b))))
		(and (not (< (+ a delta) b)) (not (< (+ b delta) a)))))

(defconstant +epsilon+ 0.001)

(defconstant +num0+ 0)
(defvar lst (loop for i from +num0+ below 5 collect i))
(defvar revlst (loop for i from (- 5 1) downto +num0+ collect i))


(mapcar (lambda (filenm) (load (merge-pathnames filenm
		(asdf:system-source-file :{{name}}{{^name}}introlisp.util{{/name}}))))
	'("tests/new-tests.lisp" "tests/new-props.lisp"
		#|"tests/classic-tests.lisp" "tests/classic-props.lisp"|#
		)
	)

(defun main (argv)
    ;(lisp-unit2:print-summary (lisp-unit2:run-tests
	;	:package :{{name}}{{^name}}introlisp.util{{/name}}/test))
	(lisp-unit2:run-tests :package :{{name}}{{^name}}introlisp.util{{/name}}/test
		:run-contexts #'lisp-unit2:with-summary-context)
    
    (log:config :warn)
    (qc:quickcheck (mapcar (lambda (props) (funcall props))
		(list 'tp-new #|'tp-classic|#)))
    (princ #\Newline)
    (qc:report (mapcan (lambda (props) (qc:collect-test-results props))
		(list 'tp-new #|'tp-classic|#)))
    
    ;({{name}}{{^name}}introlisp.util{{/name}}.classic:close-lib)
    ) ;(uiop:quit))

;(if (member (pathname-name *load-truename*) (uiop:command-line-arguments)
;        :test #'(lambda (x y) (search x y :test #'equalp)))
;    (main (uiop:command-line-arguments)))
;(main (uiop:command-line-arguments))

(defun run-suites ()
	(main (uiop:command-line-arguments))
	(uiop:quit)
	)

(defun save-image ()
	#+sbcl (sb-ext:save-lisp-and-die "build/ts_main" :executable t
		:toplevel '{{name}}{{^name}}introlisp.util{{/name}}/test:run-suites)
	#+clisp (ext:saveinitmem "build/ts_main" :executable t
		:init-function '{{name}}{{^name}}introlisp.util{{/name}}/test:run-suites)
	#+ccl (ccl:save-application "build/ts_main" :prepend-kernel t
		:toplevel-function '{{name}}{{^name}}introlisp.util{{/name}}/test:run-suites)
	)
